#!/usr/bin/env node

/*
 * bin/www . This file is the starting point of the application. It requires
 * app.js for configuration and setup. Use this file for add custom 
 * configuration and imports.
 */


/********************************* VARIABLES *********************************/

//Module dependencies.
var app = require('../app');
var debug = require('debug')('mean-base:server');
var http = require('http');

//Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

//Create HTTP server.
var server = http.createServer(app);


/*********************** DATABASE *********************/

//Uncomment to import database helper 
//var dbHelper = require("../helpers/db");    


//Add configurations and imports below


/*****************************************************************************/


/********************************* APP START *********************************/

//Start with db if needed
if(typeof dbHelper !== 'undefined') {
  var db = dbHelper.connect();

  db.on('error', console.error.bind(console, 'connection error:'));

  db.once('open', function() {
    //Listen on provided port, on all network interfaces.
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  });
}
else {
  //Listen on provided port, on all network interfaces.
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/*****************************************************************************/


/********************************* FUNCTIONS *********************************/

//Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

//Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

//Event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/*****************************************************************************/